type Monad = [M: .. [T] => Top, A] => {
    return: (A) -> M[A],
    bind: [B] -> (M[A], (A) -> M[B]) -> M[B]
}

type State = [S, T] => (S) -> {T, S}

def state_monad: [S, A] -> Monad[State[S], A] = [S, A] -> {
    return = (a, s) -> {a, s},
    bind = [B] -> (m, f, s) ->
        var bs = m(s);
        f(bs.0, bs.1)
}

type S = [T] => State[Int, T]

def sm = state_monad[Int]

def new = (counter: Int) -> {unit, counter}

def increment = [T] -> (v: T, s: Int) -> {v, s + 1}

def log = [T] -> (v: T, s: Int) ->
    print(s);
    {v, s}

def program = (m: S[Unit]) ->
    var m = sm[Unit].bind[Unit](m, log[Unit]);
    var m = sm[Unit].bind[Unit](m, increment[Unit]);
    var m = sm[Unit].bind[Unit](m, log[Unit]);
    var m = sm[Unit].bind[String](m, (u) -> sm[String].return("Hello world !"));
    var m = sm[String].bind[String](m, increment[String]);
    var m = sm[String].bind[Unit](m, (s) -> sm[Unit].return(print(s)));
    var m = sm[Unit].bind[Unit](m, log[Unit]);
    m

def main = program(new)(0)
