def main = unit

// Tests taken from this paper (pages 23 and 24)
// https://dl.acm.org/doi/pdf/10.1145/3632890
// Note than some inferred types may look different but still be equivalent
// to the types inferred by SuperF.
// This is notably because we do not distribute polymorphic types and have less
// powerful type simplification.

type List = [T] => {T}
type ST = [S, A] => {A}

def bot = bot

def app: [A, B] -> ((A) -> B, A) -> B = (p, a) -> p(a)
def append: [A] -> (List[A], List[A]) -> List[A] = (p, p) -> p
def arg_st: [S] -> ST[S, Int] = {0}
def auto: ([A] -> (A) -> A) -> ([A] -> (A) -> A) = (p) -> p
def auto2: [B] -> ([A] -> (A) -> A) -> (B) -> B = (a, b) -> b
def cons: [A] -> (A, List[A]) -> List[A] = (p, p) -> p
def const: [A, B] -> (A) -> (B) -> A = (a, b) -> a
def choose: [A] -> (A, A) -> A = (a, b) -> a
def head: [T] -> (List[T]) -> T = (p) -> p.0
def nil: [T] -> List[T] = [T] -> {bot}
def id: [T] -> (T) -> T = (p) -> p
def ids: List[[T] -> (T) -> T] = {id}
def inc: (Int) -> Int = (p) -> p
def map: [A, B] -> ((A) -> B, List[A]) -> List[B] = (f, p) -> {f(p.0)}
def length: [T] -> (List[T]) -> Int = (p) -> 0
def poly: ([A] -> (A) -> A) -> {Int, Bool} = (p) -> {0, true}
def revapp: [A, B] -> (A, (A) -> B) -> B = (a, p) -> p(a)
def run_st: [A] -> ([S] -> ST[S, A]) -> A = (p) -> p.0
def single: [A] -> (A) -> List[A] = (p) -> {p}
def tail: [A] -> (List[A]) -> List[A] = (p) -> p

def f: [A] -> ((A) -> A, List[A]) -> A = (f, l) -> l.0

def a1 = (x, y) -> y         // Ok
def a2 = choose(id)          // Ok
def a3 = choose(nil, ids)    // Ok (could be simplified with better type system)
def a4 = (x) -> x(x)         // Ok
def a5 = id(auto)            // Ok
def a6 = id(auto2)           // Ok
def a7 = choose(id, auto)    // Ok (looks different but correct)
def a8 = choose(id, auto2)   // Ok (looks different but correct)
def a9 = f(choose(id), ids)  // Ok
def a10 = poly(id)           // Ok
def a11 = poly((p) -> p)     // Ok
def a12 = id(poly((p) -> p)) // Ok

def b1 = (f) -> {f(1), f(true)} // Ok
def b2 = (xs) -> poly(head(xs)) // Ok

def g: [A] -> (List[A], List[A]) -> A = (l, l) -> l.0

def c1 = length(ids)                     // Ok
def c2 = tail(ids)                       // Ok
def c3 = head(ids)                       // Ok
def c4 = single(id)                      // Ok
def c5 = cons(id, ids)                   // Ok
def c6 = cons((x) -> x, ids)             // Ok
def c7 = append(single(inc), single(id)) // Ok (could be simplified with better type system)
def c8 = g(single(id), ids)              // Ok
def c9 = map(poly, single(id))           // Ok
def c10 = map(head, single(ids))         // Ok

def d1 = app(poly, id)          // Ok
def d2 = revapp(id, poly)       // Ok
def d3 = run_st(arg_st)         // Ok
def d4 = app(run_st, arg_st)    // Ok
def d5 = revapp(arg_st, run_st) // Ok

def k: [A] -> (A,  List[A]) -> A = (a, l) -> a
def h: (Int) -> [A] -> (A) -> A = (i, a) -> a
def l: List[[A] -> (Int, A) -> A] = {(i, a) -> a}
def r: ([A] -> (A) -> [B] -> (B) -> B) -> Int = (p) -> 0

def e1 = k(h, l)             // Ok (could be simplified with better type system)
def e2 = (k((x) -> h(x)))(l) // Ok (could be simplified with better type system)
def e3 = r((x, y) -> y)      // Ok

def f5 = auto(id)                     // Ok
def f6 = cons(head(ids), ids)         // Ok
def f7 = head(ids, 3)                 // Ok
def f8 = choose(head(ids))            // Ok
def f9 = var f = revapp(id); f(poly)  // Ok
def f10 = choose(id, (x) -> auto2(x)) // Ok (looks different because no distributivity)

type ChurchInt = [A] -> ((A) -> A) -> ((A) -> A)

def s = (n, f, x) -> f(n(f, x))
def z = (f, x) -> x
def n3 = s(s(s(z)))

def to_church = (n) -> if n == 0 then z else s(to_church(n - 1))

def g1a = z : ChurchInt                       // Ok
def g2 = s                                    // Ok
def g2a = s : ((ChurchInt) -> ChurchInt)      // Ok
def g3a = n3 : ChurchInt                      // Ok
def g4a = ((u: Unit) -> n3(n3)) : ((Unit) -> ChurchInt)
                                              // Ok
def g5 = n3((x) -> {x, 0}, 1).0.0.0           // Ok
def g7 = (s(s(z)))(s(s(z)))
    // The type is different (SuperF infers `forall 'a 'b 'c. ('a -> ('a & 'b & 'c) & 'c -> ('a & 'c)) -> 'c -> 'b`)
    // However, in SuperF, this expression fails to type check against its own inferred type when using type ascription.
    // Also, doing `def b = s(s z) def g7 = b b` leads to a different inferred type in SuperF

def g8 = to_church                            // Ok
def g8a = to_church : ((Int) -> ChurchInt)    // Ok
def g9 = (x) -> if true then x else g9(g9(x)) // Ok (nice !!!)
// def g10 = ((x) -> x(x))((x) -> x(x))       // Not ok (infinite recursion)
def g11 = auto(auto2(id))                     // Ok
def g12 = ((y) -> var tmp = y(id); y(const)) ((x) -> x(x))
                                              // Ok (different than SuperF since we respect more type annotations)
def g13 = ((k) -> {k((x) -> x), k ((x) -> single(x))}) ((f) -> {f(1), f(true)})
                                              // Ok
def g14 = ((f) -> var a = ((u: Unit) -> f(id)); a(unit) : ((Int) -> ([B] -> (B) -> B))) (const(const(id)))
                                              // Ok
