type Recorda = {a: Void, b: Void};
type Union = Void | Void;
type Inter = Void & Void;
type Abs = [T, U] Void;
type App = Abs[Void, Void];

type PairO = (IntOrString, IntOrString);
type IntOrString = Int | String;

type A = [T: Any] -> B;
type B = Int;
type C = B;

def name = string;
def string = "Hello world !";
def ascr = name : String;
def block = { ret 0 };
def if_ = if true then name else name;

type AB = [T] T;

def ab: AB[Bool] = true;

type Pair = [T] (T, T);

def pair: Pair[Bool] = @(true, false);

type Record = [T] { a: T, b: T };

def record: Record[Bool | Int] = @{ a = true, b = 0 };










type Tuple = [T] T;
type Make = [T] -> (T) -> T;

def make_zero: Make = [T] => (p: T) -> Tuple[T] =>
    p;

def main = {
    void;
};
