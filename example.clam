type Fun = (Void, Void) -> Void;
type Tuple = (Void, Void);
type Record = {a: Void, b: Void};
type Union = Void | Void;
type Inter = Void & Void;
type Abs = [] Void;
type App = Void[Void, Void];

type Pair = (IntOrString, IntOrString);
type IntOrString = Int | String;

def name = a;
def void_ = void;
def true_ = true;
def false_ = false;
def int = 0;
def char = 'a';
def string = "Hello world !";
def preop = +a;
def binop = a + b;
def cast = a as A;
def ascr = a : A;
def block = { def a = b; def c = d; e };
def if_ = if a then b else c;
def abs = (a: A, b: B) -> C { d };
def app = a(b, c);
def type_abs = [A: B, C: D] e;
def type_app = a[B, C];
