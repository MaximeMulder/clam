type Fun = (Void, Void) -> Void;
type Tuple = (Void, Void);
type Record = {a: Void, b: Void};
type Union = Void | Void;
type Inter = Void & Void;
type Abs = [] Void;
type App = Void[Void, Void];

type Self = [T: Any] T;
type Universal = [T: Any] -> T;

type Pair = (IntOrString, IntOrString);
type IntOrString = Int | String;

type A = [T: Any] -> B;
type B = Int;
type C = B;

def name = string;
def void_ = void;
def true_ = true;
def false_ = false;
def int = 0;
def char = 'a';
def string = "Hello world !";
def preop = +name;
def binop = name + name;
def ascr = name : Tuple;
def block = { type AAAA = Int; def a = b; def b = c; def c = name; name : AAAA };
def if_ = if name then name else name;
def abs = (a: Tuple, b: Tuple): Tuple -> name;
def app = name(name, name);
def type_abs = [AA: Tuple, C: Tuple] -> { name: AA };
def type_app = name[Tuple, Tuple];
